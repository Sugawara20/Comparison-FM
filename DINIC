/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FlujoMaximo;

/**
 *
 * @author User
 */

import java.util.*;

public class MaxFlowDinic {

  static class Edge {
    int t, rev, cap, f;

    public Edge(int t, int rev, int cap) {
      this.t = t;
      this.rev = rev;
      this.cap = cap;
    }
  }

  public static List<Edge>[] createGraph(int nodes) {
    List<Edge>[] graph = new List[nodes];
    for (int i = 0; i < nodes; i++)
      graph[i] = new ArrayList<>();
    return graph;
  }

  public static List<Edge>[] createGraph2(int nodes) {
    int aristas = nodes * 4;
    List<Edge>[] graph = new List[nodes];
    for (int i = 0; i < nodes; i++){
      graph[i] = new ArrayList<>();
    }
    for(int i=0; i<aristas ; i++){
          Random first = new Random();
          int f = first.nextInt(nodes);
          
          Random second = new Random();
          int s = second.nextInt(nodes);
          
          Random claseRandom = new Random();
          int peso = 1 + claseRandom.nextInt(21 - 1);
          
          addEdge(graph, f, s, peso);
      }
    return graph;
  }
  
  public static void addEdge(List<Edge>[] graph, int s, int t, int cap) {
    graph[s].add(new Edge(t, graph[t].size(), cap));
    graph[t].add(new Edge(s, graph[s].size() - 1, 0));
  }
  

  static boolean dinicBfs(List<Edge>[] graph, int src, int dest, int[] dist) {
    Arrays.fill(dist, -1);
    dist[src] = 0;
    int[] Q = new int[graph.length];
    int sizeQ = 0;
    Q[sizeQ++] = src;
    for (int i = 0; i < sizeQ; i++) {
      int u = Q[i];
      for (Edge e : graph[u]) {
        if (dist[e.t] < 0 && e.f < e.cap) {
          dist[e.t] = dist[u] + 1;
          Q[sizeQ++] = e.t;
        }
      }
    }
    return dist[dest] >= 0;
  }

  static int dinicDfs(List<Edge>[] graph, int[] ptr, int[] dist, int dest, int u, int f) {
    if (u == dest)
      return f;
    for (; ptr[u] < graph[u].size(); ++ptr[u]) {
      Edge e = graph[u].get(ptr[u]);
      if (dist[e.t] == dist[u] + 1 && e.f < e.cap) {
        int df = dinicDfs(graph, ptr, dist, dest, e.t, Math.min(f, e.cap - e.f));
        if (df > 0) {
          e.f += df;
          graph[e.t].get(e.rev).f -= df;
          return df;
        }
      }
    }
    return 0;
  }

  public static int maxFlow(List<Edge>[] graph, int src, int dest) {
    int flow = 0;
    int[] dist = new int[graph.length];
    while (dinicBfs(graph, src, dest, dist)) {
      int[] ptr = new int[graph.length];
      while (true) {
        int df = dinicDfs(graph, ptr, dist, dest, src, Integer.MAX_VALUE);
        if (df == 0)
          break;
        flow += df;
      }
    }
    return flow;
  }

  // Usage example
  public static void main(String[] args) {
    long inicio = System.nanoTime();
    
    List<Edge>[] graph2 = createGraph2(500000);
    
    List<Edge>[] graph = createGraph(11);
    
    /* PRIMER CASO 0-5*/
  /*addEdge(graph, 0, 1, 16);
    addEdge(graph, 0, 2, 13);
    addEdge(graph, 1, 2, 10);
    addEdge(graph, 1, 3, 12);
    addEdge(graph, 2, 1, 4);
    addEdge(graph, 2, 4, 14);
    addEdge(graph, 3, 2, 9);
    addEdge(graph, 3, 5, 20);
    addEdge(graph, 4, 3, 7);
    addEdge(graph, 4, 5, 4);*/
    
    /* SEGUNDO CASO 0-8 */
  /*addEdge(graph, 0, 1, 8);
    addEdge(graph, 0, 2, 3);
    addEdge(graph, 0, 9, 4);
    addEdge(graph, 0, 10, 5);
    addEdge(graph, 1, 3, 10);
    
    addEdge(graph, 2, 4, 12);
    addEdge(graph, 3, 10, 6);
    addEdge(graph, 4, 6, 14);
    addEdge(graph, 5, 3, 7);
    addEdge(graph, 5, 7, 5);
   
    addEdge(graph, 6, 9, 8);
    addEdge(graph, 8, 6, 5);
    addEdge(graph, 8, 7, 7);
    addEdge(graph, 8, 10, 9);
    addEdge(graph, 9, 8, 20);
    
    addEdge(graph, 10, 7, 8);
    addEdge(graph, 10, 9, 16);*/
    
    
    /* TERCER CASO 0-9*/
    addEdge(graph, 0, 1, 5);
    addEdge(graph, 0, 4, 15);
    addEdge(graph, 0, 8, 10);
    addEdge(graph, 1, 2, 10);
    addEdge(graph, 2, 3, 10);
    
    addEdge(graph, 2, 9, 25);
    addEdge(graph, 3, 7, 5);
    addEdge(graph, 4, 5, 25);
    addEdge(graph, 5, 6, 10);
    addEdge(graph, 5, 10, 20);
   
    addEdge(graph, 6, 7, 10);
    addEdge(graph, 8, 1, 15);
    addEdge(graph, 8, 9, 20);
    addEdge(graph, 9, 4, 5);
    addEdge(graph, 9, 10, 30);
    
    addEdge(graph, 10, 2, 15);
    addEdge(graph, 10, 6, 15);
    addEdge(graph, 10, 7, 15);


  
    
    System.out.println("El Flujo maximo es: "+maxFlow(graph2, 0, 99999));
    
    long fin = System.nanoTime();
    double de = (double) (fin-inicio);
    double dif = (double) (fin - inicio) * 0.000001;
    
    System.out.println();
    System.out.println("El programa dura " + dif + " milisegundos");
  }
}
